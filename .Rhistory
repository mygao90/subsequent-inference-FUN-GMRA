}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$maximum
}
alphasup
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
alphasup
n=5
alpha=0.01
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
tvec=vec[,1]
otv = order(tvec) # a vector of orders
utv = unique(tvec[otv],decrease=TRUE) # unique values of T, ordered ...
utv
tvec=vec[,1]
otv = order(tvec,decrease=TRUE) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
tvec=vec[,1]
otv = order(-tvec) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
utv
alphasup = NULL
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
alphasup
makeNmat = function()
# enumerate all possible values for the observation Nvec ~ Multinomial(n,[3],p)
# assumes global value for "n"
{
Nmat = matrix(-1,nrow=((n+1)*(n+2)/2),ncol=3)
i=0
for(N1 in 0:n)
for(N2 in 0:(n-N1))
{
N3 = n-N1-N2 ; Nvec = c(N1,N2,N3)
i=i+1 ; Nmat[i,] = Nvec
}
return(Nmat)
}
HWpvec = function(theta) # Hardy-Weinberg with \theta \in [0,1]
c( theta^2 , 2*theta*(1-theta) , (1-theta)^2 )
likelihood = function(data,param)
dmultinom(data,prob=param)
exactdistr = function()
{
#glrtsuper = glrtsub = NULL
distsuper=distsub= matrix(0,nrow=dim(Nmat)[1]*(dim(Nmat)[1]+1)/2,ncol=7)
k=1
for(i in 1:nrow(Nmat))
{for (j in i:nrow(Nmat))
{
phat1 = Nmat[i,]/n
phat2 = Nmat[j,]/n
pmle1  = HWpvec(phat1[1]+phat1[2]/2)
pmle2  = HWpvec(phat2[1]+phat2[2]/2)
theta0 = (phat1[1]+phat1[2]/2+phat2[1]+phat2[2]/2)/2
#pmle = Nmat[i,]+Nmat[j,]
denom = likelihood(Nmat[i,],HWpvec(theta0))*likelihood(Nmat[j,],HWpvec(theta0))
glrtsuper = likelihood(Nmat[i,],phat1)*likelihood(Nmat[j,],phat2)/denom
glrtsub   = likelihood(Nmat[i,],pmle1)*likelihood(Nmat[j,],pmle2)/denom
distsuper[k,]  =  c( glrtsuper,Nmat[i,],Nmat[j,])
distsub[k,]  =  c(glrtsub,Nmat[i,],Nmat[j,])
k=k+1
}}
return( list( distsuper,distsub ))
}
HWdensity<-function(v,theta)
{2^{v[2]}*theta^{2*v[1]+v[2]}*(1-theta)^{2*v[3]+v[2]}}
exactpower = function(vec)
# assumes global values for "Nmat" & "theta0" & "thetaAseq" & "alpha"
{
tvec=vec[,1]
otv = order(-tvec) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
#while (optimize()<=alpha)
alphasup = NULL
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{print(tvec[j])
f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
cvi =which(alphasup>alpha)[1]
print(cvi)
prej=alphasup[cvi-1]
rprob =alpha-prej
return(rprob)
}
n=5
alpha=0.01
Nmat = makeNmat()
edistr=exactdistr()
powersuper = exactpower(edistr[[1]])
n=5
alpha=0.01
Nmat = makeNmat()
edistr=exactdistr()
vec= edistr[[1]]
vec
tvec=vec[,1]
otv = order(-tvec) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
#while (optimize()<=alpha)
alphasup = NULL
i=1
tv = utv[1:i]
tv
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{print(vec[j])
f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{print(vec[j])}
}
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{print(vec[j,])}
}
length(tvec)
dim(Nmat)
21^2
231/21
dim(vec)
makeNmat = function()
# enumerate all possible values for the observation Nvec ~ Multinomial(n,[3],p)
# assumes global value for "n"
{
Nmat = matrix(-1,nrow=((n+1)*(n+2)/2),ncol=3)
i=0
for(N1 in 0:n)
for(N2 in 0:(n-N1))
{
N3 = n-N1-N2 ; Nvec = c(N1,N2,N3)
i=i+1 ; Nmat[i,] = Nvec
}
return(Nmat)
}
HWpvec = function(theta) # Hardy-Weinberg with \theta \in [0,1]
c( theta^2 , 2*theta*(1-theta) , (1-theta)^2 )
likelihood = function(data,param)
dmultinom(data,prob=param)
exactdistr = function()
{
#glrtsuper = glrtsub = NULL
distsuper=distsub= matrix(0,nrow=dim(Nmat)[1]*(dim(Nmat)[1]+1)/2,ncol=7)
k=1
for(i in 1:nrow(Nmat))
{for (j in 1:nrow(Nmat))
{
phat1 = Nmat[i,]/n
phat2 = Nmat[j,]/n
pmle1  = HWpvec(phat1[1]+phat1[2]/2)
pmle2  = HWpvec(phat2[1]+phat2[2]/2)
theta0 = (phat1[1]+phat1[2]/2+phat2[1]+phat2[2]/2)/2
#pmle = Nmat[i,]+Nmat[j,]
denom = likelihood(Nmat[i,],HWpvec(theta0))*likelihood(Nmat[j,],HWpvec(theta0))
glrtsuper = likelihood(Nmat[i,],phat1)*likelihood(Nmat[j,],phat2)/denom
glrtsub   = likelihood(Nmat[i,],pmle1)*likelihood(Nmat[j,],pmle2)/denom
distsuper[k,]  =  c( glrtsuper,Nmat[i,],Nmat[j,])
distsub[k,]  =  c(glrtsub,Nmat[i,],Nmat[j,])
k=k+1
}}
return( list( distsuper,distsub ))
}
HWdensity<-function(v,theta)
{2^{v[2]}*theta^{2*v[1]+v[2]}*(1-theta)^{2*v[3]+v[2]}}
exactpower = function(vec)
# assumes global values for "Nmat" & "theta0" & "thetaAseq" & "alpha"
{
tvec=vec[,1]
otv = order(-tvec) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
#while (optimize()<=alpha)
alphasup = NULL
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
cvi =which(alphasup>alpha)[1]
print(cvi)
prej=alphasup[cvi-1]
rprob =alpha-prej
return(rprob)
}
n=5
alpha=0.01
Nmat = makeNmat()
edistr=exactdistr()
vec= edistr[[1]]
powersuper = exactpower(edistr[[1]])
n=5
alpha=0.01
Nmat = makeNmat()
edistr=exactdistr()
exactdistr = function()
{
#glrtsuper = glrtsub = NULL
distsuper=distsub= matrix(0,nrow=dim(Nmat)[1]^2,ncol=7)
k=1
for(i in 1:nrow(Nmat))
{for (j in 1:nrow(Nmat))
{
phat1 = Nmat[i,]/n
phat2 = Nmat[j,]/n
pmle1  = HWpvec(phat1[1]+phat1[2]/2)
pmle2  = HWpvec(phat2[1]+phat2[2]/2)
theta0 = (phat1[1]+phat1[2]/2+phat2[1]+phat2[2]/2)/2
#pmle = Nmat[i,]+Nmat[j,]
denom = likelihood(Nmat[i,],HWpvec(theta0))*likelihood(Nmat[j,],HWpvec(theta0))
glrtsuper = likelihood(Nmat[i,],phat1)*likelihood(Nmat[j,],phat2)/denom
glrtsub   = likelihood(Nmat[i,],pmle1)*likelihood(Nmat[j,],pmle2)/denom
distsuper[k,]  =  c( glrtsuper,Nmat[i,],Nmat[j,])
distsub[k,]  =  c(glrtsub,Nmat[i,],Nmat[j,])
k=k+1
}}
return( list( distsuper,distsub ))
}
n=5
alpha=0.01
Nmat = makeNmat()
edistr=exactdistr()
vec= edistr[[1]]
dim(vec)
HWdensity<-function(v,theta)
{2^{v[2]}*theta^{2*v[1]+v[2]}*(1-theta)^{2*v[3]+v[2]}}
exactpower = function(vec)
# assumes global values for "Nmat" & "theta0" & "thetaAseq" & "alpha"
{
tvec=vec[,1]
otv = order(-tvec) # a vector of orders
utv = unique(tvec[otv]) # unique values of T, ordered ...
#while (optimize()<=alpha)
alphasup = NULL
for(i in 1:length(utv))
{
tv = utv[1:i]
vecsum <-function(x)
{ f=0
for (j in 1:length(tvec))
{if (any(tv==tvec[j]))
{f=f+HWdensity(vec[j,2:4],x) *HWdensity(vec[j,5:7],x)}
}
f
}
alphasup[i]= optimize(vecsum,interval=c(0,1),maximum=TRUE)$objective
}
cvi =which(alphasup>alpha)[1]
print(cvi)
prej=alphasup[cvi-1]
rprob =alpha-prej
return(rprob)
}
powersuper = exactpower(edistr[[1]])
powersuper
require(vegan)
doisomap = function(zz,isok,isodim)
# zz is (m+2) x d
{
dmzz = vegdist(sqrt(zz),method="euclidean") # NB: Hellinger !!!!!
isozz = isomap(dmzz,k=isok,ndim=isodim,path="shortest")$points
return( sqrt(sum((isozz[nrow(zz),]-isozz[nrow(zz)-1,])^2)) )
}
makeNmat = function()
# enumerate all possible values for the observation Nvec ~ Multinomial(n,[3],p)
# assumes global value for "n"
{
Nmat = matrix(-1,nrow=((n+1)*(n+2)/2),ncol=3)
i=0
for(N1 in 0:n)
for(N2 in 0:(n-N1))
{
N3 = n-N1-N2 ; Nvec = c(N1,N2,N3)
i=i+1 ; Nmat[i,] = Nvec
}
return(Nmat)
}
HWpvec = function(theta) # Hardy-Weinberg
c( theta^2 , 2*theta*(1-theta) , (1-theta)^2 )
infodistSimplex = function(a,b)
round(
4 * asin( sqrt( sum( (sqrt(a) - sqrt(b))^2 ) ) / 2 ) # Kass 1989 p 193
,10)
infodistHW = function(a,b)
round(
abs( 2*sqrt(2) * (asin(sqrt(a)) - asin(sqrt(b))) ) # Kass 1989
,10)
mhde = function(phat) # MHDE(H-W)
{
num = phat[1]^(1/2) - phat[3]^(1/2)
denom = 2 * ( 1 + phat[2] - 2*phat[1]^(1/2)*phat[3]^(1/2) )^(1/2)
if(num==0) return(1/2)
if((1/2+num/denom) < 0) return(0)
if((1/2+num/denom) > 1) return(1)
return(1/2+num/denom)
}
auxiliary = function(m=0,mrand=F,nrand=0,myseed=12345)
{
if(!m) return(NULL)
else # auxiliary data for manifold learning given by pthetamat {phat_i}_{i=1}^{m}
{
set.seed(myseed)
if(!mrand) thetai = seq(0,1,length=(m+2))[2:(m+1)]
else       thetai = runif(m)
pthetamat = matrix( HWpvec(thetai) , ncol=3,byrow=F) # NB: nrand=0 => n=infty => p(theta)'s aot phat's !!!!!
if(nrand) for(i in 1:m) pthetamat[i,] = tabulate( sample(3,nrand,replace=T,pthetamat[i,]) ,nbins=3)/nrand
return(pthetamat)
}
}
exactdistr = function(m=0,isok1=2,isok2=2, mrand=F,nrand=0,isodim=1,myseed=12345)
# assumes global values for "Nmat" & "theta0"
{
dsuper = dsub = diso1 = diso2 = NULL
pthetamat = auxiliary(m,mrand,nrand,myseed) # auxiliary data for manifold learning given by pthetamat {phat_i}_{i=1}^{m}
for(i in 1:nrow(Nmat))
{
phat = Nmat[i,]/sum(Nmat[i,])
dsuper[i] = infodistSimplex(phat,HWpvec(theta0))
dsub[i] = infodistHW( mhde(phat) , theta0 )
diso1[i] = doisomap( rbind(pthetamat,phat,HWpvec(theta0)) ,isok1,isodim)
#diso2[i] = doisomap( rbind(pthetamat,phat,HWpvec(theta0)) ,isok2,isodim)
#learn the manifold with all data
}
return( list( dsuper,dsub,diso1))
}
exactpower = function(tvec)
# assumes global values for "Nmat" & "theta0" & "thetaAseq" & "alpha"
{
pvec0=NULL ; for(i in 1:nrow(Nmat)) pvec0[i] = dmultinom(Nmat[i,],prob=HWpvec(theta0))
otv = order(tvec)
utv = unique(tvec[otv]) # unique values of T, ordered ...
pmf = cdf = NULL
for(i in 1:length(utv))
{
tv = utv[i]
pmf[i] = sum(pvec0[tvec==tv])
cdf[i] = sum(pmf[1:i])
}
cvi = which(cdf>(1-alpha))[1]
cv = utv[cvi]   # reject for T > cv
prej = sum(pvec0[tvec>cv])
# randomize rejection: if T = cv, reject with probability rprob/pcv
pcv = sum(pvec0[tvec==cv])
rprob = alpha-prej
power = NULL
for(A in 1:length(thetaAseq))
{
pvecA=NULL ; for(i in 1:nrow(Nmat)) pvecA[i] = dmultinom(Nmat[i,],prob=HWpvec(thetaAseq[A]))
power[A] = sum(pvecA[tvec>cv]) + (rprob/pcv)*sum(pvecA[tvec==cv])
}
return(power)
}
n = 10
Nmat = makeNmat()
theta0 = 0.30
alpha = 0.05
thetaAseq = seq(0.00,1.00,length=101)
myseed=1234
edistr = exactdistr()
powersuper = exactpower(edistr[[1]])  ### T2
powersub = exactpower(edistr[[2]])    ### T1
#poweriso1 = exactpower(edistr[[3]])    ### T3 # NB: m=0 => poweriso == powersuper, as it should be !!
nMC=100
powerisoMC1=powerisoMC2=matrix(0,nrow=nMC,ncol=length(thetaAseq));
#for(myseed in 1:nMC)
#{powerisoMC1[myseed,] = exactpower(exactdistr(m=25,isok1=10,mrand=TRUE,nrand=10,isodim=1,myseed=myseed)[[3]])}
#powerisoave = apply(powerisoMC1,2,mean)
powerisoMC1[myseed,] = exactpower(exactdistr(m=1000,isok1=10,mrand=TRUE,nrand=10,isodim=1,myseed=myseed)[[3]])
#powerisoMC2[myseed,] = exactpower(exactdistr(m=25,isok2=5,mrand=TRUE,nrand=10,isodim=1,myseed=myseed)[[4]])
par(mfrow=c(1,2))
plot(thetaAseq,powerisoave,col=2,type="l",lty=3,lwd=3,ylab="power",ylim=c(0,1),main=paste("n=",n,",theta0=",theta0,",alpha =",alpha))
points(thetaAseq,powersub,col=1,type="l",lty=3,lwd=3)
legend("bottomright",legend=c("HW","tri"),col=1:2,lty=3, lwd=3,bty="n")
abline(v=theta0,lty=3)
abline(h=alpha,lty=3)
plot(thetaAseq,powerisoave-powersub,type="l",lty=3,lwd=3,ylim=c(-0.25,0.25)) ; abline(h=0,lty=3) ; abline(v=theta0,lty=3)
title("poweriso-powerHW")
plot(thetaAseq,powersuper-powersub,type="l",lty=3,lwd=3,ylim=c(-0.25,0.25)) ; abline(h=0,lty=3) ; abline(v=theta0,lty=3)
title("powertri-powerHW")
powerisoMC1= exactpower(exactdistr(m=1000,isok1=10,mrand=TRUE,nrand=10,isodim=1,myseed=myseed)[[3]])
#powerisoMC2[myseed,] = exactpower(exactdistr(m=25,isok2=5,mrand=TRUE,nrand=10,isodim=1,myseed=myseed)[[4]])
powerisoMC1
auxiliary = function(m=0,mrand=F,nrand=0,myseed=12345)
{
if(!m) return(NULL)
else # auxiliary data for manifold learning given by pthetamat {phat_i}_{i=1}^{m}
{
set.seed(myseed)
if(!mrand) thetai = seq(0,1,length=(m+2))[2:(m+1)]
else       thetai = runif(m)
pthetamat = matrix( HWpvec(thetai) , ncol=3,byrow=F) # NB: nrand=0 => n=infty => p(theta)'s aot phat's !!!!!
if(nrand) for(i in 1:m) pthetamat[i,] = tabulate( sample(3,nrand,replace=T,pthetamat[i,]) ,nbins=3)/nrand
return(pthetamat)
}
}
ph =auxiliary(25,25,10,1234)
ph
HWpvec = function(theta) # Hardy-Weinberg
c( theta^2 , 2*theta*(1-theta) , (1-theta)^2 )
phh= rbind(pthetamat,phat,HWpvec(theta0))
zz= rbind(pthetamat,phat,HWpvec(theta0))
dmzz = vegdist(sqrt(zz),method="euclidean")
require(vegan)
dmzz = vegdist(sqrt(zz),method="euclidean")
dim(dmzz)
dmzz
is.matrix(dmzz)
isomap(dmzz,k=isok,ndim=isodim,path="shortest")$points
isomap(dmzz,k=10,ndim=1,path="shortest")$points
y
x
library(vegan)
load("Xhat.KC.Rbin")
dat<-Xhat.KC
dis<-vegdist(dat,"euclidean")
iso = isomap(dis,k=10,ndim=1,path="shortest")
y<-iso$points
x<-seq(1,100,1)
lab= as.character(x)
plot(rep(1,100),y,axes=F,type="o",pch=19)
axis(side=2)
text(rep(1,100),y,lab,pos=4,xpd=T)
plot(y)
write.table(dat, file = "Xhat.KC.dat", sep = "\t",
           row.names = FALSE,
            col.names = FALSE, qmethod =  "double")
getwd("D:\jhu\research\dimension reduction\GMRA")
load("Xhat.KC.Rbin")
getwd("D\jhu\research\dimension reduction\GMRA")
load("Xhat.KC.Rbin")
load("Xhat.KC.Rbin")
dat<-Xhat.KC
dis<-vegdist(dat,"euclidean")
iso = isomap(dis,k=10,ndim=1,path="shortest")
y<-iso$points
x<-seq(1,100,1)
lab= as.character(x)
plot(rep(1,100),y,axes=F,type="o",pch=19)
axis(side=2)
text(rep(1,100),y,lab,pos=4,xpd=T)
axis(side=2)
text(rep(1,100),y,lab,pos=4,xpd=T)
plot(y)
write.table(dat, file = "Xhat.KC.dat", sep = "\t",
           row.names = FALSE,
            col.names = FALSE, qmethod =  "double")
            col.names = FALSE, qmethod =  "double")
write.table(csv, file = "Xhat.KC.dat", sep = ",",
           row.names = FALSE,
            col.names = FALSE, qmethod =  "double")
write.table(csv, file = "Xhat.KC.csv", sep = ",",
           row.names = FALSE,
            col.names = FALSE, qmethod =  "double")
write.table(dat, file = "Xhat.KC.csv", sep = ",",
           row.names = FALSE,
            col.names = FALSE, qmethod =  "double")
q()
q()
